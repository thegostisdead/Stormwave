package main

import (
	"encoding/json"
	"fmt"
	"github.com/abdfnx/gosh"
	"io/ioutil"
	"net"
	"net/http"
	"strings"
)

type GetPublicIpParams struct {
}

func getPublicIp(params GetPublicIpParams) (string, error) {
	req, err := http.Get("http://ip-api.com/json/")
	if err != nil {
		fmt.Println("")
		return "Error", err
	}
	defer req.Body.Close()

	body, err := ioutil.ReadAll(req.Body)
	if err != nil {
		fmt.Println("")
		return "Error", err
	}

	var ip IP
	json.Unmarshal(body, &ip)

	return ip.Query, nil
}

type GetPrivateIpParams struct {
	Network string `json:"network"`
}
type IP struct {
	Query string
}

func getPrivateIp(params GetPrivateIpParams) string {

	var result strings.Builder
	ifaces, _ := net.Interfaces()
	// handle err
	for _, i := range ifaces {
		addrs, _ := i.Addrs()
		// handle err
		for _, addr := range addrs {
			var ip net.IP
			switch v := addr.(type) {
			case *net.IPNet:
				ip = v.IP
			case *net.IPAddr:
				ip = v.IP
			}
			// process IP address
			result.WriteString(fmt.Sprintf("ip : %s interface %s\n", ip, i.Name))

		}
	}
	return result.String()

}

type NetworkScanParams struct {
	StartIPv4Address string `json:"startIPv4Address"`
	EndIPv4Address   string `json:"endIPv4Address"`
}

func networkScan(params NetworkScanParams) string {
	var scannerPath string = UserHomeDir() + "\\AppData\\Roaming\\agent\\IPv4NetworkScan.ps1"

	fullCommand := fmt.Sprintf("powershell.exe -ExecutionPolicy Bypass -File %s -StartIPv4Address %s -EndIPv4Address %s", scannerPath, params.StartIPv4Address, params.EndIPv4Address)
	fmt.Println(fullCommand)
	err, out, _ := gosh.RunOutput(fullCommand)
	fmt.Println(out)
	if err != nil {
		fmt.Println(err)
	}

	return out
}
