package main

import (
	"encoding/json"
	"fmt"
	"os"
	"reflect"
	"runtime"
)

const (
	CONFIG_PATH = "%userprofile%\\AppData\\Local\\stormwave\\config.json"
)

type Config struct {
	PullingRate int    `json:"pullingRate"`
	Gateway     string `json:"gateway"`
}

func fileExists(filename string) bool {
	_, err := os.Stat(filename)
	return !os.IsNotExist(err)
}

func loadConfig(createIfMissing bool) Config {

	fmt.Print("Go runs on ")
	switch os := runtime.GOOS; os {
	case "darwin":
		fmt.Println("OS X.")
	case "linux":
		fmt.Println("Linux.")
	default:
		// freebsd, openbsd,
		// plan9, windows...
		fmt.Printf("%s.\n", os)
	}

	if !fileExists(CONFIG_PATH) {
		fmt.Println("Config file does not exist")

		if createIfMissing {
			fmt.Println("Creating config file")
			// create configuration file (config.json)
			file, err := os.Create(CONFIG_PATH)

			if err != nil {

			}

			file.WriteString("{\"pullingRate\": \"10\", \"gateway\": \"http://localhost:8080\"}")
			file.Close()

		} else {
			fmt.Println("Not creating config file")
			panic("Config file does not exist")
		}

	}

	// load configuration file (config.json)
	file, err := os.ReadFile(CONFIG_PATH)

	if err != nil {
		fmt.Println("Failed to load config file")
		fmt.Println(err)
		panic(err)
	}

	data := Config{}
	err = json.Unmarshal([]byte(file), &data)

	if err != nil {
		fmt.Println("Failed to load config file")
		fmt.Println(err)
		panic(err)
	}

	fmt.Println(data)
	return data
}

func saveConfig(config Config) {

	// save configuration file (config.json)

}

func updateConfig(key string, value string) Config {
	// edit configuration file (config.json)
	currentConfig := loadConfig(false)

	r := reflect.ValueOf(currentConfig)
	f := reflect.Indirect(r).FieldByName(key)
	f.SetString(value)

	saveConfig(currentConfig)

	return currentConfig
}
