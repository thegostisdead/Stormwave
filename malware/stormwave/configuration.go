package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"runtime"
)

type Config struct {
	PullingRate int    `json:"pullingRate"`
	Gateway     string `json:"gateway"`
}

func defaultConfig() Config {
	return Config{
		PullingRate: 10,
		Gateway:     "http://localhost:8080",
	}
}

func loadConfig(createIfMissing bool) Config {

	fmt.Print("[Config] Loading config.json ...")
	switch osName := runtime.GOOS; osName {
	case "darwin":
		fmt.Println("OS X.")
	case "linux":
		fmt.Println("Linux.")
	default:
		fmt.Printf("%s.\n", osName)
	}

	homeDir := UserHomeDir()
	configPath := homeDir + "\\AppData\\Roaming\\agent\\config.json"

	if !fileExists(configPath) {
		fmt.Println("[Config] Config file does not exist")

		if createIfMissing {
			fmt.Println("[Config] Creating config file")
			// create configuration file (config.json)
			file, err := os.OpenFile(configPath, os.O_CREATE, 0644)

			if err != nil {
				fmt.Println(err)
				log.Fatal("Can't create the config file.")
			}

			stringConfig, err := json.Marshal(defaultConfig())
			file.WriteString(string(stringConfig))
			file.Close()

		} else {
			fmt.Println("[Config] Not creating config file")
			panic("Config file does not exist")
		}

	}

	// load configuration file (config.json)
	file, err := os.ReadFile(configPath)

	if err != nil {
		fmt.Println("[Config] Failed to load config file")
		fmt.Println(err)
		panic(err)
	}

	data := Config{}
	err = json.Unmarshal([]byte(file), &data)

	if err != nil {
		fmt.Println("[Config] Failed to load config file")
		fmt.Println(err)
		panic(err)
	}

	fmt.Println(data)
	return data
}

func saveConfig(config Config) {

	homeDir := UserHomeDir()
	configPath := homeDir + "\\AppData\\Roaming\\agent\\config.json"

	// save configuration file (config.json)
	res, _ := json.MarshalIndent(config, "", " ")

	file, err := os.OpenFile(configPath, os.O_APPEND, 0644)

	if err != nil {
		fmt.Println(err)
		log.Fatal("Can't save the new config file.")
	}
	file.WriteString(string(res))
	file.Close()

}
