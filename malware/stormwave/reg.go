package main

import (
	"fmt"
	"golang.org/x/sys/windows/registry"
	"log"
	"syscall"
)

type Key syscall.Handle

var roots = map[string]Key{
	"CLASSES_ROOT":     Key(syscall.HKEY_CLASSES_ROOT),
	"CURRENT_USER":     Key(syscall.HKEY_CURRENT_USER),
	"LOCAL_MACHINE":    Key(syscall.HKEY_LOCAL_MACHINE),
	"USERS":            Key(syscall.HKEY_USERS),
	"CURRENT_CONFIG":   Key(syscall.HKEY_CURRENT_CONFIG),
	"PERFORMANCE_DATA": Key(syscall.HKEY_PERFORMANCE_DATA),
}

type CreateRegValueParams struct {
	RootKey   string `json:"rootKey"`
	Path      string `json:"path"`
	TargetKey string `json:"targetKey"`
	Value     string `json:"value"`
}

func CreateRegValue(params CreateRegValueParams) {

	fmt.Printf("full path %s\\%s\n", registry.Key(roots[params.RootKey]), params.Path)
	k, err := registry.OpenKey(registry.Key(roots[params.RootKey]), params.Path, registry.QUERY_VALUE|registry.SET_VALUE)

	if err != nil {
		fmt.Println("Cant open registry")
		log.Fatal(err)
	}

	if err := k.SetStringValue(params.TargetKey, params.Value); err != nil {
		log.Fatal(err)
	}

	if err := k.Close(); err != nil {
		log.Fatal(err)
	}

}

type EditRegValueParams struct {
	RootKey   string `json:"rootKey"`
	Path      string `json:"path"`
	TargetKey string `json:"targetKey"`
	Value     string `json:"value"`
}

func EditRegValue(params EditRegValueParams) {
	k, err := registry.OpenKey(registry.Key(roots[params.RootKey]), params.Path, registry.QUERY_VALUE|registry.SET_VALUE)
	if err != nil {
		log.Fatal(err)
	}
	if err := k.SetStringValue(params.TargetKey, params.Value); err != nil {
		log.Fatal(err)
	}
	if err := k.Close(); err != nil {
		log.Fatal(err)
	}
}

type DeleteRegValueParams struct {
	RootKey   string `json:"rootKey"`
	Path      string `json:"path"`
	TargetKey string `json:"targetKey"`
}

func DeleteRegValue(params DeleteRegValueParams) {
	k, err := registry.OpenKey(registry.Key(roots[params.RootKey]), params.Path, registry.ALL_ACCESS)

	if err != nil {
		log.Fatal(err)
	}
	defer k.Close()
}
