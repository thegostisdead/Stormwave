package main

import (
	"fmt"
	"golang.org/x/sys/windows/registry"
	"log"
)

var roots = map[string]registry.Key{
	"CLASSES_ROOT":     registry.CLASSES_ROOT,
	"CURRENT_USER":     registry.CURRENT_USER,
	"LOCAL_MACHINE":    registry.LOCAL_MACHINE,
	"USERS":            registry.USERS,
	"CURRENT_CONFIG":   registry.CURRENT_CONFIG,
	"PERFORMANCE_DATA": registry.PERFORMANCE_DATA,
}

type CreateRegValueParams struct {
	RootKey   string `json:"rootKey"`
	Path      string `json:"path"`
	TargetKey string `json:"targetKey"`
	Value     string `json:"value"`
}

func CreateRegValue(params CreateRegValueParams) {

	fmt.Printf("full path %s\\%s\n", params.RootKey, params.Path)
	k, err := registry.OpenKey(roots[params.RootKey], params.Path, registry.ALL_ACCESS)

	if err != nil {
		fmt.Println("Cant open registry")
	}

	if err := k.SetStringValue(params.TargetKey, params.Value); err != nil {
		fmt.Println("Can't write string")
	}

	if err := k.Close(); err != nil {
		fmt.Println("Can't close the key")
	}

}

type EditRegValueParams struct {
	RootKey   string `json:"rootKey"`
	Path      string `json:"path"`
	TargetKey string `json:"targetKey"`
	Value     string `json:"value"`
}

func EditRegValue(params EditRegValueParams) {
	k, err := registry.OpenKey(registry.Key(roots[params.RootKey]), params.Path, registry.QUERY_VALUE|registry.SET_VALUE)
	if err != nil {
		log.Fatal(err)
	}
	if err := k.SetStringValue(params.TargetKey, params.Value); err != nil {
		log.Fatal(err)
	}
	if err := k.Close(); err != nil {
		log.Fatal(err)
	}
}

type DeleteRegValueParams struct {
	RootKey   string `json:"rootKey"`
	Path      string `json:"path"`
	TargetKey string `json:"targetKey"`
}

func DeleteRegValue(params DeleteRegValueParams) {
	k, err := registry.OpenKey(registry.Key(roots[params.RootKey]), params.Path, registry.ALL_ACCESS)

	if err != nil {
		fmt.Println(err)
	}
	defer k.Close()
}

type GetRegValueParams struct {
	RootKey   string `json:"rootKey"`
	Path      string `json:"path"`
	TargetKey string `json:"targetKey"`
}

func GetRegValue(params GetRegValueParams) (string, error) {
	k, err := registry.OpenKey(roots[params.RootKey], params.Path, registry.READ)
	if err != nil {
		return "", err
	}
	defer k.Close()

	// Read the value from the registry
	value, _, err := k.GetStringValue(params.TargetKey)
	if err != nil {
		return "", err
	}

	return value, nil
}
